#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-ldap
# REQUIRE: root NETWORK
# BEFORE: SERVERS

. /etc/rc.freenas

generate_ldapconf()
{
	/usr/local/libexec/nas/generate_ldap_conf.py
}

generate_nss_ldapconf()
{
	/usr/local/libexec/nas/generate_nss_ldap_conf.py
}

get_cifs_homedir()
{
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_path

	FROM
		sharing_cifs_share

	WHERE
		cifs_home = 1

	ORDER BY
		-sharing_cifs_share.id

	LIMIT 1;
	"
}

setup_homedirs()
{
	local cifs_home="$(get_cifs_homedir)"

	if [ -n "${cifs_home}" ]
	then
		ln -sfh "$cifs_home" "/var/home" 2>/dev/null

	elif [ ! -d "/var/home" ]
	then
		mkdir /var/home
	fi
}

ldap_status()
{
	local IFS=\|
	local ret=0
	local fail="/tmp/.ldap_fail"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ldap.ldap_anonbind, 	 
		ldap.ldap_binddn, 	 
		ldap.ldap_bindpw, 	 
		ldap.ldap_ssl,
		kr.krb_realm,
		kp.principal_name
	FROM
		directoryservice_ldap as ldap

	LEFT OUTER JOIN
		directoryservice_kerberosrealm as kr
	ON
		ldap.ldap_kerberos_realm_id = kr.id

	LEFT OUTER JOIN
		directoryservice_kerberosprincipal as kp
	ON
		ldap.ldap_kerberos_principal_id = kp.id

	ORDER BY
		-ldap.id

	LIMIT 1
	" | \
	while eval read ldap_anonbind ldap_binddn ldap_bindpw ldap_ssl realm principal
	do
		local res=1
		local ldapsearch=/usr/local/bin/ldapsearch
		local options=

		if [ "${ldap_ssl}" = "start_tls" ]
		then
			options="-Z"
		fi

		if [ -n "${realm}" -a -n "${principal}" ]
		then
			local temp=$(mktemp /tmp/tmp.XXXXXX)
			local cmdfile=$(mktemp /tmp/tmp.XXXXXX)
			local cmd
		
			chmod 400 "${temp}"

			echo "${ldapsearch} ${options} -Y GSSAPI  -b '' -s base" > "${cmdfile}"
			cmd=$(cat ${cmdfile})
			eval "${cmd}" >/dev/null 2>&1
			res=$?

			rm -f "${temp}" "${cmdfile}"

		elif [ "${ldap_anonbind}" = "0" ]
		then
			local temp=$(mktemp /tmp/tmp.XXXXXX)
			local cmdfile=$(mktemp /tmp/tmp.XXXXXX)
			local cmd
		
			chmod 400 "${temp}"
			echo -n "$(/usr/local/www/freenasUI/middleware/notifier.py pwenc_decrypt ${ldap_bindpw})" > "${temp}"

			echo "${ldapsearch} ${options} -D "'${ldap_binddn}'" -b '' -s base -y "${temp}"" > "${cmdfile}"
			cmd=$(cat ${cmdfile})
			eval "${cmd}" >/dev/null 2>&1
			res=$?

			rm -f "${temp}" "${cmdfile}"
		else		
			local cmdfile=$(mktemp /tmp/tmp.XXXXXX)
			local cmd

			echo "${ldapsearch} -D '' -b '' -s base ${options}" > "${cmdfile}"
			cmd=$(cat ${cmdfile})
			eval "${cmd}" >/dev/null 2>&1
			res=$?

			rm -f "${cmdfile}"
		fi

		if [ "${res}" != "0" ]
		then
			touch "${fail}"
		fi
	done

	if [ -f "${fail}" ]
	then
		rm -f "${fail}"
		ret=1
	fi

	return ${ret}
}

ldap_start()
{
	if dirsrv_enabled ldap
	then
		generate_nss_ldapconf

		if ! generate_ldapconf
		then
			return 1
		fi

		if ! setup_homedirs
		then
			return 2
		fi

		if ! create_cache_filesystem
		then
			return 4
		fi
	fi
}

ldap_stop()
{
        /usr/local/www/freenasUI/tools/cachetool.py expire
}


name="ix-ldap"
start_cmd='ldap_start'
status_cmd='ldap_status'
stop_cmd='ldap_stop'
            
load_rc_config $name
run_rc_command "$1"

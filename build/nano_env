#!/bin/sh
#
# Script for building the nanobsd environment up. Required because of the way
# things are setup in NanoBSD today (this should be simplified).
#

# Environment variables that drive the nanobsd build and a few of the
# other build / image generation scripts.

# Are we doing a TrueNAS build?
is_truenas() {
    test "$NANO_LABEL" = "TrueNAS" -o ! -z "$TESTING_TRUENAS"
    return $?
}

# The FreeNAS source and build tree is rooted here.
: ${AVATAR_ROOT=$(pwd)}

: ${TRUENAS_COMPONENTS_ROOT=${AVATAR_ROOT}/nas_source/truenas-components}

# The website for this avatar project.
: ${AVATAR_PROJECT_SITE=http://www.freenas.org}

# The support site for this avatar project.
: ${AVATAR_SUPPORT_SITE=http://support.freenas.org}

# The architecture for the machine (amd64, i386, etc).
# NOTE: have to do things this way because nanobsd.sh sets this value
# explicitly in the script.
: ${NANO_ARCH=$(uname -p)}
if ! [ "${NANO_ARCH}" == "amd64" -o "${NANO_ARCH}" == "i386" ] ; then
	echo "Possible values for NANO_ARCH are amd64 or i386"
	exit
fi

# Setup a humanized name for the image. Doesn't affect "os-base/*/"'s naming
# because people would get jangry (sic) having to rebuild their workspaces from
# scratch, changing NANO_ARCH would require shuffling around kernconfs, hacking
# TARGET/TARGET_MACHINE before jumping into the [base/ports] build system and
# because it's not user facing.
#
# Bottom line is that this is a cheap 'hack' to get what we want for Linux-y
# and Windows-y users.
case "$NANO_ARCH" in
amd64)
	NANO_ARCH_HUMANIZED="x64"
	;;
i386)
	NANO_ARCH_HUMANIZED="x86"
	;;
*)
	NANO_ARCH_HUMANIZED=$NANO_ARCH
	;;
esac

# The avatar component being built (os-base, etc).
: ${AVATAR_COMPONENT=os-base}

# os-base/amd64, etc. Other locations where this is set explicitly and try to
# figure out why it's done that way before changing this line / ordering..

NANO_OBJ=${AVATAR_ROOT}/objs/${AVATAR_COMPONENT}/${NANO_ARCH}

# Where the build configuration files used by nanobsd.sh live.
NANO_CFG_BASE=$AVATAR_ROOT/build/nanobsd-cfg

# Where the FreeBSD ports tree lives.
NANO_PORTS="$AVATAR_ROOT/FreeBSD/ports"

# Where our private ports tree lives.
NAS_PORTS="$AVATAR_ROOT/nas_ports"

# Where the FreeBSD source tree lives.
NANO_SRC="$AVATAR_ROOT/FreeBSD/src"

# Where the nanobsd tools live.
NANO_TOOLS="$AVATAR_ROOT/build/nanobsd"

# Where our hackity hacks are
NANO_KLUDGES="$AVATAR_ROOT/build/kludges"

if [ -z "${SVNVERSION}" ]; then
	# This is executed sometimes as set -e; don't let it fail by no-oping
	# it.
	svnversion=$(command -v svnversion || :)
	git_cmd=$(command -v git || :)

	if [ -n "$svnversion" ] ; then
		# svn prints out errors to stdout. Bad svn! No cookie for you!
		svn=$(sh -c "echo r\$(cd ${AVATAR_ROOT} && /usr/bin/env LANG=C $svnversion)") || svn=""
	fi
	[ "${svn}" = "rUnversioned directory" ] && svn=""
	if [ -z "$svn" ]; then
		if [ -n "$git_cmd" ] ; then
			git=`$git_cmd rev-parse --verify --short HEAD 2>/dev/null`
			svn=`$git_cmd svn find-rev $git 2>/dev/null || echo ""`
			if [ -n "$svn" ] ; then
				svn="r${svn}"
				git="=${git}"
			else
				svn=`$git_cmd log | fgrep 'git-svn-id:' | head -1 | \
				    sed -n 's/^.*@\([0-9][0-9]*\).*$/\1/p'`
				if [ -n "$svn" ] ; then
					svn="r${svn}"
					git="+${git}"
				else
					git="${git}"
				fi
			fi
		fi
	fi
fi


if [ -z "${SEQUENCE}" -a -n "${git}" ]; then
    # Get the sequence number from the time of the commit
    SEQUENCE=`$git_cmd show -s --format=%ct ${git}`
    SEQUENCE="${NANO_LABEL}-${VERSION}-${SEQUENCE}"
    export SEQUENCE
fi

# SVNREVISION allows us to keep the SVN[/git] revision number for the build.
SVNREVISION=${SVNREVISION:-$(echo ${svn}${git})}

: ${REVISION=$(echo ${svn}${git})}

if is_truenas ; then
	NANO_KERNEL="$TRUENAS_COMPONENTS_ROOT/nanobsd/TRUENAS.$NANO_ARCH"
else
	NANO_KERNEL="$NANO_CFG_BASE/FREENAS.$NANO_ARCH"
fi

# Local directories to install via buildworld and installworld respectively;
# see LOCAL_DIRS in Makefile.inc1, e.g. tools/regression/netinet6/ip6_sockets .
if is_truenas ; then
	: ${NANO_LOCAL_DIRS=share/examples/ses}
else
	: ${NANO_LOCAL_DIRS=""}
fi

add_nano_modules()
{

	NANO_MODULES="${NANO_MODULES} $*"
}

add_nano_modules cc/cc_cdg cc/cc_chd cc/cc_cubic cc/cc_hd cc/cc_htcp cc/cc_vegas
add_nano_modules cxgb cxgbe cyclic
add_nano_modules dtrace ext2fs fdescfs geom ipmi khelp/h_ertt krpc
add_nano_modules libiconv libmchain lindev linprocfs linsysfs linux
add_nano_modules nfs_common nfsclient nfslock
add_nano_modules kgssapi kgssapi_krb5
add_nano_modules ispfw/ispfw
add_nano_modules opensolaris
add_nano_modules pf pflog smbfs splash/bmp
add_nano_modules udf usb/xhci zfs
add_nano_modules iscsi toecore
add_nano_modules dummynet

if is_truenas ; then
	add_nano_modules hwpmc ipdivert ipfw ispfw linprocfs syscons/blank
else
	add_nano_modules ctl cxgbe/t4_firmware cxgbe/t5_firmware
	add_nano_modules syscons
	add_nano_modules netgraph/ether netgraph/socket
fi

# Feature sets to enable as part of the build.
SW_FEATURES="REPORTING"

# DEBUG=1, etc.
for feature in $SW_FEATURES; do
	eval "$(echo "$feature")=1"
done

if [ -z "$NANO_LABEL" ] ; then
	echo "build/nano_env: NANO_LABEL unset, should be 'FreeNAS'"
	exit 1
fi

if [ -z "$VERSION" ] ; then
	echo "build/nano_env: VERSION unset, should be '9.2.1-ALPHA'"
	exit 1
fi

NANO_LABEL_LOWER=`echo $NANO_LABEL | tr 'A-Z' 'a-z'`


# FreeBSD release we are using for this release
: ${FREEBSD_RELEASE_VERSION:="9.3-RELEASE"}
export FREEBSD_RELEASE_VERSION

: ${FREEBSD_RELEASE_MAJOR_VERSION=${FREEBSD_RELEASE_VERSION%%.*}}
export FREEBSD_RELEASE_MAJOR_VERSION

UNAME_RELEASE="$(/usr/bin/uname -r)"
SYSTEM_RELEASE_MAJOR_VERSION="$(echo "${UNAME_RELEASE}"|cut -f1 -d.)"
export UNAME_RELEASE SYSTEM_RELEASE_MAJOR_VERSION

# Image name, e.g. FreeNAS-8.1-r7609-amd64 or FreeNAS-8.0.1-RC1-i386, see
# nanobsd/freenas-common:last_orders().
NANO_NAME="${SEQUENCE}"
NANO_IMGNAME="$NANO_NAME"

# Export these vars to override the NanoBSD defaults.
export AVATAR_ROOT FREENAS_ARCH
export NANO_ARCH NANO_ARCH_HUMANIZED NANO_CFG_BASE NANO_IMGNAME NANO_KERNEL
export NANO_MODULES NANO_NAME NANO_OBJ NANO_SRC NANO_TOOLS REVISION
export SVNREVISION

# The following variables are for builders with local package and distfile
# mirrors. They're intentionally unset here to avoid accidental pollution from
# one's environment. Please replace these lines with valid values.


# See pkg_add(1).
unset PACKAGEROOT
unset PACKAGESITE

HW_NCPU=$(sysctl -n hw.ncpu)
HW_PHYSMEM=$(sysctl -n hw.physmem)
HW_PHYSMEM=$(expr ${HW_PHYSMEM} / 1073741824 - 4)

# Can be overriden with env when calling, but use pxz by default
# if it's installed.
NANO_XZ=pxz

# Assertions:
# Beyond 16 threads pxz reaches a point of diminishing returns
# A pxz thread needs 1GB of RAM

# If the system has fewer than 16 cores use as many threads
# as possible given the 1GB per thread rule
# If it has 16 or more cores use 1 thread/GB capped out
# by the limit of 16
# This logic prevents explosions on systems with 4 cores and 96GB
# of RAM or 40 cores and 8GB of RAM.
# TODO: Refactor this logic.  It makes my brain hurt.
if [ "${HW_NCPU}" -lt 16 ]; then
	if [ ${HW_NCPU} -lt ${HW_PHYSMEM} ]; then
		PXZ_ACCEL="-T ${HW_NCPU}"
	else
		PXZ_ACCEL="-T ${HW_PHYSMEM}"
	fi
else
	if [ ${HW_PHYSMEM} -gt 16 ]; then
		PXZ_ACCEL="-T 16"
	else
		PXZ_ACCEL="-T ${HW_PHYSMEM}"
	fi
fi
export NANO_XZ
export PXZ_ACCEL

: ${PORTS_DISTFILES_CACHE:="/builds/distfiles_cache"}
export PORTS_DISTFILES_CACHE

# See bsd.port.mk
# This is our local package cache.
MASTER_SITE_BACKUP="${PORTS_DISTFILES_CACHE}/\${DIST_SUBDIR}/ http://download.freenas.org/distfiles/\${DIST_SUBDIR}/ http://distcache.FreeBSD.org/ports-distfiles/\${DIST_SUBDIR}/"

: ${MASTER_SITE_FREEBSD:=yes}
export MASTER_SITE_FREEBSD

#
# FTP mirror where we fetch files for jails
#
: ${FREEBSD_FTP_MIRROR:="ftp://ftp.freebsd.org"}
export FREEBSD_FTP_MIRROR

#
# Package mirror where we fetch packages for jails
#
: ${FREEBSD_PACKAGE_MIRROR:="http://pkg.cdn.pcbsd.org/freenas"}
export FREEBSD_PACKAGE_MIRROR

: ${FREEBSD_PACKAGE_MIRROR_32="http://mirror.exonetric.net/pub/pkgng/freebsd:9:x86:32/latest"}
export FREEBSD_PACKAGE_MIRROR_32

NANO_BOOT0CFG="-o packet -s 1 -m 3 -t 18"

NANO_RAM_TMPVARSIZE=
NANO_RAM_ETCSIZE=65536

NANO_IMAGES=2
# Remove .orig and .rej too
# Removing X11 needs more work, it blows rdd + fonts
NANO_IGNORE_FILES_EXPR=$(echo "$NANO_IGNORE_FILES_EXPR" | sed -e 's/)/|\.orig$|\.rej$)/')

if [ "$DEBUG" = 1 ]; then
	DEBUG_BUILD="
DEBUG_FLAGS=		-g
"
else
	DEBUG_INSTALL="
INSTALL_NODEBUG=	t
"
fi

: ${WITH_PKGNG:="yes"}
export WITH_PKGNG

# NB: leave c++ enabled so devd can be built
CONF_BUILD="
#WITHOUT_ACPI=true
WITHOUT_ATM=true
WITHOUT_BIND_DNSSEC=true
WITHOUT_BIND_ETC=true
WITHOUT_BIND_LIBS_LWRES=true
WITHOUT_BIND_NAMED=true
WITHOUT_BLUETOOTH=true
WITHOUT_BSNMP=true
WITHOUT_CALENDAR=true
WITHOUT_CTM=true
WITHOUT_CVS=true
WITHOUT_DICT=true
WITHOUT_EXAMPLES=true
WITHOUT_FORTRAN=true
WITHOUT_FREEBSD_UPDATE=yes
WITHOUT_GAMES=true
WITHOUT_GCOV=true
WITHOUT_GPIB=true
WITHOUT_HTML=true
WITHOUT_I4B=true
WITHOUT_IPFILTER=true
WITHOUT_IPX=true
WITHOUT_LIB32=true
WITHOUT_LIBKSE=true
# Required for proper terminal locale
#WITHOUT_LOCALES=true
WITHOUT_LPR=true
WITHOUT_NDIS=true
WITHOUT_NLS=true
WITHOUT_NS_CACHING=true
WITHOUT_OBJC=true
WITH_OPENSSH_NONE_CIPHER=true
WITHOUT_PORTSNAP=true
WITHOUT_PPP=true
WITHOUT_PROFILE=true
WITHOUT_RCMDS=true
WITHOUT_SENDMAIL=true
# Knob needs to be fixed on systems that don't have the docs stuff
# preinstalled, e.g. 9.x bsdinstall images.
#WITHOUT_SHAREDOCS=true
WITHOUT_SYSINSTALL=true
# Telnet's a useful tool to have on the remote box.
#WITHOUT_TELNET=true
WITHOUT_WIRELESS=true
WITHOUT_WPA_SUPPLICANT_EAPOL=true

DEFAULT_VERSIONS=python=2.7

NOPORTDOCS=true

LOCAL_DIRS=${NANO_LOCAL_DIRS}

${DEBUG_BUILD}
"

CONF_BUILD="$CONF_BUILD WITHOUT_CLANG=true WITHOUT_SSP=true"

if is_truenas ; then
	CONF_BUILD="$CONF_BUILD
WITH_OFED=true
BOOT_COMCONSOLE_PORT=0x2f8
BOOT_COMCONSOLE_SPEED=115200
"
fi
CONF_INSTALL="$CONF_BUILD
# devel/apr sucks.
WITH_BDB_VER=46

${DEBUG_INSTALL}
"
# The following would help...
# WITHOUT_TOOLCHAIN=true		can't build ports
# WITHOUT_INSTALLLIB=true		libgcc.a
#
# from the build
# WITHOUT_INFO=true			makeinfo
# WITHOUT_RCS=true
PKG_ONLY_MAKE_CONF="

WITHOUT_CLANG=true
WITHOUT_CLANG_IS_CC=true
WITHOUT_GCC=true
WITHOUT_INSTALLLIB=true
WITHOUT_INFO=true
WITHOUT_RCS=true
WITHOUT_SHAREDOCS=true
"

if ! is_truenas ; then
	PKG_ONLY_MAKE_CONF="${PKG_ONLY_MAKE_CONF}"
fi

export CONF_BUILD
export CONF_INSTALL

# vim: syntax=sh
